# ASP.NET Core
# Build and test ASP.NET Core web applications targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/dotnet-core

pool:
  vmImage: 'vs2017-win2016'

trigger:
  branches:
    include:
    - master
    - refs/tags/*

variables:
  buildConfiguration: 'Release'

steps:
- task: gittools.gitversion.gitversion-task.GitVersion@4
  displayName: GitVersion

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:Version=$(GitVersion.AssemblySemVer)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: |
      **/tests/*.Tests/*.csproj
      **/tests/*.IntegrationTests/*.csproj
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[Opw.*]*" /p:Exclude="[*Tests]*"'

# Release: triggered by a version tag
- task: DotNetCoreCLI@2
  displayName: NuGet Pack Opw.PineBlog.Core
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
    command: pack
    packagesToPack: '**/Opw.PineBlog.Core.csproj'
    nobuild: true
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion_NuGetVersion'

- task: DotNetCoreCLI@2
  displayName: NuGet Pack Opw.PineBlog.RazorPages
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
    command: pack
    packagesToPack: '**/Opw.PineBlog.RazorPages.csproj'
    nobuild: true
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion_NuGetVersion'

- task: DotNetCoreCLI@2
  displayName: NuGet Pack Opw.PineBlog.EntityFrameworkCore
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
    command: pack
    packagesToPack: '**/Opw.PineBlog.EntityFrameworkCore.csproj'
    nobuild: true
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion_NuGetVersion'

- task: DotNetCoreCLI@2
  displayName: NuGet Pack Opw.PineBlog
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
    command: pack
    packagesToPack: '**/Opw.PineBlog.csproj'
    nobuild: true
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion_NuGetVersion'

- task: NuGetCommand@2
  displayName: NuGet Push
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: NuGet
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion_NuGetVersion'

- task: DotNetCoreCLI@2
  displayName: Publish
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
    command: publish
    publishWebProjects: false
    projects: |
      **/samples/Opw.PineBlog.Sample/*.csproj
    arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory) /p:Version=$(GitVersion.AssemblySemVer) --no-build'
    zipAfterPublish: false

- task: GithubRelease@0
  displayName: Create GitHub Release
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
   gitHubConnection: GitHub
   repositoryName: $(Build.Repository.Name)
   action: create
   target: $(Build.SourceVersion)
   tagSource: auto
   tag: '$(Build.BuildNumber)'

# Finalize
- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: Generate Code Coverage Report
  inputs:
    reports: $(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml
    targetdir: $(build.artifactstagingdirectory)/TestResults/
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Results'
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: $(build.artifactstagingdirectory)/TestResults/cobertura.xml
    # To make the task not regenerate the report an environment variable was added to the pipeline in Azure DevOps; "disable.coverage.autogenerate: 'true'"
    # see: https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention
    reportDirectory: '$(build.artifactstagingdirectory)/TestResults'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  condition: always()
  inputs:
    PathtoPublish: $(build.artifactstagingdirectory)
