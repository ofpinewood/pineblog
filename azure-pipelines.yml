# ASP.NET Core
# Build and test ASP.NET Core web applications targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/dotnet-core

pool:
  vmImage: 'vs2017-win2016'

trigger:
  branches:
    include:
    - master
    - refs/tags/*
    
schedules:
- cron: '0 0 * * *'
  displayName: Daily Build
  always: true
  branches:
    include:
    - master

variables:
  buildConfiguration: 'Release'
  # Define the GitVersion environment variables so they can be used in all tasks.
  GitVersion.SemVer: '' 
  GitVersion.NuGetVersion: ''

stages:
  - stage: preBuild # Print the variables and do some other initialization things
    displayName: 'PreBuild'
    jobs:
      - job: PreBuild
        workspace: 
          clean: outputs # Delete Build.BinariesDirectory before running a new job.
        steps:  
          - checkout: self  # 'self' represents the repo where the initial Azure Pipelines YAML file was found
            clean: true # If true, run `execute git clean -ffdx && git reset --hard HEAD` before fetching

          - task: UseGitVersion@5
            displayName: GitVersion
            inputs:
              versionSpec: '5.x'

          # https://dotnet.microsoft.com/download/dotnet-core/3.1
          - task: UseDotNet@2
            displayName: Install .Net Core (specified in global.json)
            inputs:
              packageType: 'sdk'
              useGlobalJson: true
              performMultiLevelLookup: true

          - script: |
              echo gitVersion.SemVer: $(GitVersion.SemVer)
              echo gitVersion.NuGetVersion: $(GitVersion.NuGetVersion)
            displayName: 'Print Variables'

  - stage: build
    displayName: 'Build'
    dependsOn: preBuild
    condition: succeeded()
    jobs:
      - job: Build
        steps:  
          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              projects: '**/*.csproj'
              configuration: '$(buildConfiguration)'
              versioningScheme: byEnvVar
              versionEnvVar: 'GitVersion.SemVer'
              # arguments: '--configuration $(buildConfiguration) /p:Version=$(GitVersion.SemVer)'

  - stage: test
    displayName: 'Test'
    dependsOn: build
    condition: succeeded()
    jobs:
      - job: Test
        steps:  
          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: test
              projects: |
                **/tests/*.Tests/*.csproj
                **/tests/*.IntegrationTests/*.csproj
              arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[Opw.*]*" /p:Exclude="[*Tests]*"'
          
          - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
            displayName: Generate Code Coverage Report
            inputs:
              reports: $(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml
              targetdir: $(build.artifactstagingdirectory)/TestResults/
              reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
            
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage Results'
            inputs:
              codeCoverageTool: cobertura
              summaryFileLocation: $(build.artifactstagingdirectory)/TestResults/cobertura.xml
              # To make the task not regenerate the report an environment variable was added to the pipeline in Azure DevOps; "disable.coverage.autogenerate: 'true'"
              # see: https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention
              reportDirectory: '$(build.artifactstagingdirectory)/TestResults'

  - stage: publish
    displayName: 'Publish'
    dependsOn: test
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/')) # Triggered by a version tag
    jobs:
      - job: Publish
        steps:  
          - task: DotNetCoreCLI@2
            displayName: 'Publish: Opw.PineBlog.Sample'
            inputs:
              command: publish
              publishWebProjects: false
              projects: |
                **/samples/Opw.PineBlog.Sample/*.csproj
              arguments: '--configuration $(buildConfiguration) --framework netcoreapp3.1 --output $(build.artifactstagingdirectory) /p:Version=$(GitVersion.SemVer) --no-build'
              zipAfterPublish: false

          # Delete the "Areas" folder, this should not be deployed
          - task: DeleteFiles@1
            displayName: 'Cleanup Publish: Opw.PineBlog.Sample'
            inputs:
              sourceFolder: $(build.artifactstagingdirectory)\Opw.PineBlog.Sample
              contents: 'Areas'

          - task: DotNetCoreCLI@2
            displayName: 'Pack: Opw.PineBlog.Core'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
            inputs:
              command: pack
              packagesToPack: '**/Opw.PineBlog.Core.csproj'
              nobuild: true
              versioningScheme: byEnvVar
              versionEnvVar: 'GitVersion.NuGetVersion'

          - task: DotNetCoreCLI@2
            displayName: 'Pack: Opw.PineBlog.RazorPages'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
            inputs:
              command: pack
              packagesToPack: '**/Opw.PineBlog.RazorPages.csproj'
              nobuild: true
              versioningScheme: byEnvVar
              versionEnvVar: 'GitVersion.NuGetVersion'

          - task: DotNetCoreCLI@2
            displayName: 'Pack: Opw.PineBlog.EntityFrameworkCore'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
            inputs:
              command: pack
              packagesToPack: '**/Opw.PineBlog.EntityFrameworkCore.csproj'
              nobuild: true
              versioningScheme: byEnvVar
              versionEnvVar: 'GitVersion.NuGetVersion'

          - task: DotNetCoreCLI@2
            displayName: 'Pack: Opw.PineBlog'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
            inputs:
              command: pack
              packagesToPack: '**/Opw.PineBlog.csproj'
              nobuild: true
              versioningScheme: byEnvVar
              versionEnvVar: 'GitVersion.NuGetVersion'

          - task: NuGetCommand@2
            displayName: 'NuGet Push'
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
            inputs:
              command: push
              nuGetFeedType: external
              publishFeedCredentials: NuGet
              versioningScheme: byEnvVar
              versionEnvVar: 'GitVersion.NuGetVersion'

          - task: GithubRelease@0
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: GitHub
              repositoryName: $(Build.Repository.Name)
              action: create
              target: $(Build.SourceVersion)
              tagSource: auto
              tag: '$(GitVersion.SemVer)'

  - stage: finalize
    displayName: 'Finalize'
    dependsOn: publish
    condition: always()
    jobs:
      - job: PostDeploy
        steps:  
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifacts'
            condition: always()
            inputs:
              PathtoPublish: $(build.artifactstagingdirectory)